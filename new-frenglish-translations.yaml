name: Frenglish Translation

on:
  push:
    branches:
      - '**' # Trigger on push to any branch

jobs:
  translate_and_format:
    # Run on push events, but skip if the commit message indicates it's a merge commit
    if: github.event_name == 'push' && !contains(github.event.head_commit.message, 'Merge pull request')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0 # Fetch all history for git diff to work reliably

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18' # Node 18 supports ES Modules well

      - name: Install dependencies
        run: |
          npm install
          # Ensure Frenglish SDK (@frenglish/sdk) is in your package.json

      - name: Setup Git User
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      # --- MODIFIED STEP: Get Language Configuration via Script ---
      - name: Get Language Configuration
        id: get_lang_config
        # Execute the .mjs script using Node
        run: node .github/scripts/fetch-frenglish-configuration.js # Adjust path if needed
        env:
          FRENGLISH_API_KEY: ${{ secrets.FRENGLISH_API_KEY }}

      # --- Step to Handle Renamed/Deleted Files (No changes needed here from previous version) ---
      - name: Handle Renamed and Deleted Source Files
        id: handle_changes
        run: |
          set -e # Exit immediately if a command exits with a non-zero status.

          # Get config from the previous step's outputs
          SOURCE_DIR="${{ steps.get_lang_config.outputs.source_lang }}"
          TARGET_DIRS="${{ steps.get_lang_config.outputs.target_langs }}"
          BEFORE_SHA="${{ github.event.before }}"
          CURRENT_SHA="${{ github.sha }}"

          # Check if config values are actually set
          if [ -z "$SOURCE_DIR" ]; then
             # Exit non-zero if source_lang is missing (likely SDK call failed)
            echo "::error::Source language was not determined. Check 'Get Language Configuration' step logs."
            exit 1
          fi
          # Allow TARGET_DIRS to be empty if the SDK returned no targets, but log warning
          if [ -z "$TARGET_DIRS" ]; then
              echo "::warning::No target languages determined. Rename/delete actions for target directories will be skipped."
              # Set processed_changes to false and exit gracefully for THIS step
              echo "processed_changes=false" >> $GITHUB_OUTPUT
              exit 0
          fi

          # Ensure the source directory exists (using fetched variable)
          if [ ! -d "$SOURCE_DIR" ]; then
            echo "Source directory '$SOURCE_DIR' (from SDK) not found. Skipping rename/delete handling for this run."
            echo "processed_changes=false" >> $GITHUB_OUTPUT
            exit 0 # Exit gracefully if source dir doesn't exist yet
          fi

          echo "Checking for renamed/deleted files in '$SOURCE_DIR' between $BEFORE_SHA and $CURRENT_SHA..."
          processed_any_change=false # Use a flag to track if we do any git operation

          git diff --name-status --find-renames $BEFORE_SHA $CURRENT_SHA -- "$SOURCE_DIR/" | grep -E "^[RD]" | while IFS=$'\t' read -r status old_path new_path; do
            relative_old_path="${old_path#$SOURCE_DIR/}"
            echo "Detected change: Status=$status, Old Path=$old_path, New Path=$new_path, Relative Path=$relative_old_path"

            for TARGET_DIR in $TARGET_DIRS; do
              if [ ! -d "$TARGET_DIR" ]; then
                echo "Target directory '$TARGET_DIR' not found. Skipping for this language."
                continue
              fi

              target_old_path="$TARGET_DIR/$relative_old_path"

              if [[ "$status" == D* ]]; then
                if [ -f "$target_old_path" ]; then
                  echo "Deleting corresponding file: $target_old_path"
                  git rm "$target_old_path"
                  processed_any_change=true
                else
                  echo "Corresponding file not found for deletion: $target_old_path"
                fi
              elif [[ "$status" == R* ]]; then
                relative_new_path="${new_path#$SOURCE_DIR/}"
                target_new_path="$TARGET_DIR/$relative_new_path"
                target_new_path_dir=$(dirname "$target_new_path")

                if [ -f "$target_old_path" ]; then
                  if [ ! -d "$target_new_path_dir" ]; then
                      echo "Creating directory for renamed file: $target_new_path_dir"
                      mkdir -p "$target_new_path_dir"
                  fi
                  echo "Renaming corresponding file: $target_old_path -> $target_new_path"
                  git mv "$target_old_path" "$target_new_path"
                  processed_any_change=true
                else
                  echo "Corresponding file not found for rename: $target_old_path"
                   if [ -f "$target_new_path" ]; then
                      echo "Note: New target path '$target_new_path' already exists."
                  fi
                fi
              fi
            done # end loop target dirs
          done # end loop git diff

          # Output based on the flag
          if [ "$processed_any_change" = true ]; then
             echo "processed_changes=true" >> $GITHUB_OUTPUT
          else
             echo "processed_changes=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run translation script (Writes/Updates files)
        env:
          FRENGLISH_API_KEY: ${{ secrets.FRENGLISH_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: node .github/scripts/translate.js # Path to your translate script

      - name: Run formatting script
        run: node .github/scripts/format-locales.js # Path to your format script

      - name: Stage ALL changes (new, modified, deleted, renamed)
        run: |
          echo "Staging all tracked changes (adds, modifications, deletes, renames)..."
          git add .

      # --- Commit Step (Minor adjustment for clarity) ---
      - name: Commit changes
        id: commit
        run: |
          # Check index status after all operations (add, rm, mv)
          if git diff --staged --quiet; then
             echo "No changes staged for commit."
             echo "changes_committed=false" >> $GITHUB_OUTPUT
          else
            echo "Committing translation updates, formatting, renames, and deletions..."
            # Use the dynamically fetched source language in the commit message
            git commit -m "chore(i18n): update translations [${{ steps.get_lang_config.outputs.source_lang }}]" \
                       -m "Sync file structure, format locales. Branch: ${{ github.ref_name }}"
            echo "changes_committed=true" >> $GITHUB_OUTPUT
            git show --stat # Show commit details
          fi

      - name: Push changes
        if: steps.commit.outputs.changes_committed == 'true'
        run: |
          echo "Pushing changes to origin/${{ github.ref_name }}..."
          git push origin HEAD:${{ github.ref_name }}