{
  "components": {
    "schemas": {
      "ErrorWebrpcEndpoint": {
        "type": "object",
        "required": [
          "error",
          "code",
          "msg",
          "status"
        ],
        "properties": {
          "error": {
            "type": "string",
            "example": "WebrpcEndpoint"
          },
          "code": {
            "type": "number",
            "example": 0
          },
          "msg": {
            "type": "string",
            "example": "endpoint error"
          },
          "cause": {
            "type": "string"
          },
          "status": {
            "type": "number",
            "example": 400
          }
        }
      },
      "ErrorWebrpcRequestFailed": {
        "type": "object",
        "required": [
          "error",
          "code",
          "msg",
          "status"
        ],
        "properties": {
          "error": {
            "type": "string",
            "example": "WebrpcRequestFailed"
          },
          "code": {
            "type": "number",
            "example": -1
          },
          "msg": {
            "type": "string",
            "example": "request failed"
          },
          "cause": {
            "type": "string"
          },
          "status": {
            "type": "number",
            "example": 400
          }
        }
      },
      "ErrorWebrpcBadRoute": {
        "type": "object",
        "required": [
          "error",
          "code",
          "msg",
          "status"
        ],
        "properties": {
          "error": {
            "type": "string",
            "example": "WebrpcBadRoute"
          },
          "code": {
            "type": "number",
            "example": -2
          },
          "msg": {
            "type": "string",
            "example": "bad route"
          },
          "cause": {
            "type": "string"
          },
          "status": {
            "type": "number",
            "example": 404
          }
        }
      },
      "ErrorWebrpcBadMethod": {
        "type": "object",
        "required": [
          "error",
          "code",
          "msg",
          "status"
        ],
        "properties": {
          "error": {
            "type": "string",
            "example": "WebrpcBadMethod"
          },
          "code": {
            "type": "number",
            "example": -3
          },
          "msg": {
            "type": "string",
            "example": "bad method"
          },
          "cause": {
            "type": "string"
          },
          "status": {
            "type": "number",
            "example": 405
          }
        }
      },
      "ErrorWebrpcBadRequest": {
        "type": "object",
        "required": [
          "error",
          "code",
          "msg",
          "status"
        ],
        "properties": {
          "error": {
            "type": "string",
            "example": "WebrpcBadRequest"
          },
          "code": {
            "type": "number",
            "example": -4
          },
          "msg": {
            "type": "string",
            "example": "bad request"
          },
          "cause": {
            "type": "string"
          },
          "status": {
            "type": "number",
            "example": 400
          }
        }
      },
      "ErrorWebrpcBadResponse": {
        "type": "object",
        "required": [
          "error",
          "code",
          "msg",
          "status"
        ],
        "properties": {
          "error": {
            "type": "string",
            "example": "WebrpcBadResponse"
          },
          "code": {
            "type": "number",
            "example": -5
          },
          "msg": {
            "type": "string",
            "example": "bad response"
          },
          "cause": {
            "type": "string"
          },
          "status": {
            "type": "number",
            "example": 500
          }
        }
      },
      "ErrorWebrpcServerPanic": {
        "type": "object",
        "required": [
          "error",
          "code",
          "msg",
          "status"
        ],
        "properties": {
          "error": {
            "type": "string",
            "example": "WebrpcServerPanic"
          },
          "code": {
            "type": "number",
            "example": -6
          },
          "msg": {
            "type": "string",
            "example": "server panic"
          },
          "cause": {
            "type": "string"
          },
          "status": {
            "type": "number",
            "example": 500
          }
        }
      },
      "ErrorWebrpcInternalError": {
        "type": "object",
        "required": [
          "error",
          "code",
          "msg",
          "status"
        ],
        "properties": {
          "error": {
            "type": "string",
            "example": "WebrpcInternalError"
          },
          "code": {
            "type": "number",
            "example": -7
          },
          "msg": {
            "type": "string",
            "example": "internal error"
          },
          "cause": {
            "type": "string"
          },
          "status": {
            "type": "number",
            "example": 500
          }
        }
      },
      "ErrorWebrpcClientDisconnected": {
        "type": "object",
        "required": [
          "error",
          "code",
          "msg",
          "status"
        ],
        "properties": {
          "error": {
            "type": "string",
            "example": "WebrpcClientDisconnected"
          },
          "code": {
            "type": "number",
            "example": -8
          },
          "msg": {
            "type": "string",
            "example": "client disconnected"
          },
          "cause": {
            "type": "string"
          },
          "status": {
            "type": "number",
            "example": 400
          }
        }
      },
      "ErrorWebrpcStreamLost": {
        "type": "object",
        "required": [
          "error",
          "code",
          "msg",
          "status"
        ],
        "properties": {
          "error": {
            "type": "string",
            "example": "WebrpcStreamLost"
          },
          "code": {
            "type": "number",
            "example": -9
          },
          "msg": {
            "type": "string",
            "example": "stream lost"
          },
          "cause": {
            "type": "string"
          },
          "status": {
            "type": "number",
            "example": 400
          }
        }
      },
      "ErrorWebrpcStreamFinished": {
        "type": "object",
        "required": [
          "error",
          "code",
          "msg",
          "status"
        ],
        "properties": {
          "error": {
            "type": "string",
            "example": "WebrpcStreamFinished"
          },
          "code": {
            "type": "number",
            "example": -10
          },
          "msg": {
            "type": "string",
            "example": "stream finished"
          },
          "cause": {
            "type": "string"
          },
          "status": {
            "type": "number",
            "example": 200
          }
        }
      },
      "ErrorUnauthorized": {
        "type": "object",
        "required": [
          "error",
          "code",
          "msg",
          "status"
        ],
        "properties": {
          "error": {
            "type": "string",
            "example": "Unauthorized"
          },
          "code": {
            "type": "number",
            "example": 1000
          },
          "msg": {
            "type": "string",
            "example": "Unauthorized access"
          },
          "cause": {
            "type": "string"
          },
          "status": {
            "type": "number",
            "example": 401
          }
        }
      },
      "ErrorPermissionDenied": {
        "type": "object",
        "required": [
          "error",
          "code",
          "msg",
          "status"
        ],
        "properties": {
          "error": {
            "type": "string",
            "example": "PermissionDenied"
          },
          "code": {
            "type": "number",
            "example": 1001
          },
          "msg": {
            "type": "string",
            "example": "Permission denied"
          },
          "cause": {
            "type": "string"
          },
          "status": {
            "type": "number",
            "example": 403
          }
        }
      },
      "ErrorMethodNotFound": {
        "type": "object",
        "required": [
          "error",
          "code",
          "msg",
          "status"
        ],
        "properties": {
          "error": {
            "type": "string",
            "example": "MethodNotFound"
          },
          "code": {
            "type": "number",
            "example": 1003
          },
          "msg": {
            "type": "string",
            "example": "Method not found"
          },
          "cause": {
            "type": "string"
          },
          "status": {
            "type": "number",
            "example": 404
          }
        }
      },
      "ErrorRequestConflict": {
        "type": "object",
        "required": [
          "error",
          "code",
          "msg",
          "status"
        ],
        "properties": {
          "error": {
            "type": "string",
            "example": "RequestConflict"
          },
          "code": {
            "type": "number",
            "example": 1004
          },
          "msg": {
            "type": "string",
            "example": "Conflict with target resource"
          },
          "cause": {
            "type": "string"
          },
          "status": {
            "type": "number",
            "example": 409
          }
        }
      },
      "ErrorAborted": {
        "type": "object",
        "required": [
          "error",
          "code",
          "msg",
          "status"
        ],
        "properties": {
          "error": {
            "type": "string",
            "example": "Aborted"
          },
          "code": {
            "type": "number",
            "example": 1005
          },
          "msg": {
            "type": "string",
            "example": "Request aborted"
          },
          "cause": {
            "type": "string"
          },
          "status": {
            "type": "number",
            "example": 400
          }
        }
      },
      "ErrorGeoblocked": {
        "type": "object",
        "required": [
          "error",
          "code",
          "msg",
          "status"
        ],
        "properties": {
          "error": {
            "type": "string",
            "example": "Geoblocked"
          },
          "code": {
            "type": "number",
            "example": 1006
          },
          "msg": {
            "type": "string",
            "example": "Geoblocked region"
          },
          "cause": {
            "type": "string"
          },
          "status": {
            "type": "number",
            "example": 451
          }
        }
      },
      "ErrorInvalidArgument": {
        "type": "object",
        "required": [
          "error",
          "code",
          "msg",
          "status"
        ],
        "properties": {
          "error": {
            "type": "string",
            "example": "InvalidArgument"
          },
          "code": {
            "type": "number",
            "example": 2001
          },
          "msg": {
            "type": "string",
            "example": "Invalid argument"
          },
          "cause": {
            "type": "string"
          },
          "status": {
            "type": "number",
            "example": 400
          }
        }
      },
      "ErrorUnavailable": {
        "type": "object",
        "required": [
          "error",
          "code",
          "msg",
          "status"
        ],
        "properties": {
          "error": {
            "type": "string",
            "example": "Unavailable"
          },
          "code": {
            "type": "number",
            "example": 2002
          },
          "msg": {
            "type": "string",
            "example": "Unavailable resource"
          },
          "cause": {
            "type": "string"
          },
          "status": {
            "type": "number",
            "example": 400
          }
        }
      },
      "ErrorQueryFailed": {
        "type": "object",
        "required": [
          "error",
          "code",
          "msg",
          "status"
        ],
        "properties": {
          "error": {
            "type": "string",
            "example": "QueryFailed"
          },
          "code": {
            "type": "number",
            "example": 2003
          },
          "msg": {
            "type": "string",
            "example": "Query failed"
          },
          "cause": {
            "type": "string"
          },
          "status": {
            "type": "number",
            "example": 400
          }
        }
      },
      "ErrorNotFound": {
        "type": "object",
        "required": [
          "error",
          "code",
          "msg",
          "status"
        ],
        "properties": {
          "error": {
            "type": "string",
            "example": "NotFound"
          },
          "code": {
            "type": "number",
            "example": 3000
          },
          "msg": {
            "type": "string",
            "example": "Resource not found"
          },
          "cause": {
            "type": "string"
          },
          "status": {
            "type": "number",
            "example": 400
          }
        }
      },
      "ErrorInsufficientFee": {
        "type": "object",
        "required": [
          "error",
          "code",
          "msg",
          "status"
        ],
        "properties": {
          "error": {
            "type": "string",
            "example": "InsufficientFee"
          },
          "code": {
            "type": "number",
            "example": 3004
          },
          "msg": {
            "type": "string",
            "example": "Insufficient fee"
          },
          "cause": {
            "type": "string"
          },
          "status": {
            "type": "number",
            "example": 402
          }
        }
      },
      "ETHTxnStatus": {
        "type": "string",
        "description": "Represented as uint on the server side",
        "enum": [
          "UNKNOWN",
          "DROPPED",
          "QUEUED",
          "SENT",
          "SUCCEEDED",
          "PARTIALLY_FAILED",
          "FAILED"
        ]
      },
      "TransferType": {
        "type": "string",
        "description": "Represented as uint32 on the server side",
        "enum": [
          "SEND",
          "RECEIVE",
          "BRIDGE_DEPOSIT",
          "BRIDGE_WITHDRAW",
          "BURN",
          "UNKNOWN"
        ]
      },
      "FeeTokenType": {
        "type": "string",
        "description": "Represented as uint32 on the server side",
        "enum": [
          "UNKNOWN",
          "ERC20_TOKEN",
          "ERC1155_TOKEN"
        ]
      },
      "SortOrder": {
        "type": "string",
        "description": "Represented as uint32 on the server side",
        "enum": [
          "DESC",
          "ASC"
        ]
      },
      "Version": {
        "type": "object",
        "required": [
          "webrpcVersion",
          "schemaVersion",
          "schemaHash",
          "appVersion"
        ],
        "properties": {
          "webrpcVersion": {
            "type": "string"
          },
          "schemaVersion": {
            "type": "string"
          },
          "schemaHash": {
            "type": "string"
          },
          "appVersion": {
            "type": "string"
          }
        }
      },
      "RuntimeStatus": {
        "type": "object",
        "required": [
          "healthOK",
          "startTime",
          "uptime",
          "ver",
          "branch",
          "commitHash",
          "chainID",
          "useEIP1559",
          "senders",
          "checks"
        ],
        "properties": {
          "healthOK": {
            "type": "boolean"
          },
          "startTime": {
            "type": "string"
          },
          "uptime": {
            "type": "number"
          },
          "ver": {
            "type": "string"
          },
          "branch": {
            "type": "string"
          },
          "commitHash": {
            "type": "string"
          },
          "chainID": {
            "type": "number"
          },
          "useEIP1559": {
            "type": "boolean"
          },
          "senders": {
            "type": "array",
            "description": "[]SenderStatus",
            "items": {
              "$ref": "#/components/schemas/SenderStatus"
            }
          },
          "checks": {
            "$ref": "#/components/schemas/RuntimeChecks"
          }
        }
      },
      "SenderStatus": {
        "type": "object",
        "required": [
          "index",
          "address",
          "etherBalance",
          "active"
        ],
        "properties": {
          "index": {
            "type": "number"
          },
          "address": {
            "type": "string"
          },
          "etherBalance": {
            "type": "number"
          },
          "active": {
            "type": "boolean"
          }
        }
      },
      "RuntimeChecks": {
        "type": "object"
      },
      "SequenceContext": {
        "type": "object",
        "required": [
          "factory",
          "mainModule",
          "mainModuleUpgradable",
          "guestModule",
          "utils"
        ],
        "properties": {
          "factory": {
            "type": "string"
          },
          "mainModule": {
            "type": "string"
          },
          "mainModuleUpgradable": {
            "type": "string"
          },
          "guestModule": {
            "type": "string"
          },
          "utils": {
            "type": "string"
          }
        }
      },
      "GasTank": {
        "type": "object",
        "required": [
          "id",
          "chainId",
          "name",
          "currentBalance",
          "unlimited",
          "feeMarkupFactor",
          "updatedAt",
          "createdAt"
        ],
        "properties": {
          "id": {
            "type": "number"
          },
          "chainId": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "currentBalance": {
            "type": "number"
          },
          "unlimited": {
            "type": "boolean"
          },
          "feeMarkupFactor": {
            "type": "number"
          },
          "updatedAt": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          }
        }
      },
      "GasTankBalanceAdjustment": {
        "type": "object",
        "required": [
          "gasTankId",
          "nonce",
          "amount",
          "totalBalance",
          "balanceTimestamp",
          "createdAt"
        ],
        "properties": {
          "gasTankId": {
            "type": "number"
          },
          "nonce": {
            "type": "number"
          },
          "amount": {
            "type": "number"
          },
          "totalBalance": {
            "type": "number"
          },
          "balanceTimestamp": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          }
        }
      },
      "GasSponsor": {
        "type": "object",
        "required": [
          "id",
          "gasTankId",
          "projectId",
          "chainId",
          "address",
          "name",
          "active",
          "updatedAt",
          "createdAt",
          "deletedAt"
        ],
        "properties": {
          "id": {
            "type": "number"
          },
          "gasTankId": {
            "type": "number"
          },
          "projectId": {
            "type": "number"
          },
          "chainId": {
            "type": "number"
          },
          "address": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "updatedAt": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          },
          "deletedAt": {
            "type": "string"
          }
        }
      },
      "GasSponsorUsage": {
        "type": "object",
        "required": [
          "name",
          "id",
          "totalGasUsed",
          "totalTxnFees",
          "totalTxnFeesUsd",
          "avgGasPrice",
          "totalTxns",
          "startTime",
          "endTime"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "id": {
            "type": "number"
          },
          "totalGasUsed": {
            "type": "number"
          },
          "totalTxnFees": {
            "type": "number"
          },
          "totalTxnFeesUsd": {
            "type": "number"
          },
          "avgGasPrice": {
            "type": "number"
          },
          "totalTxns": {
            "type": "number"
          },
          "startTime": {
            "type": "string"
          },
          "endTime": {
            "type": "string"
          }
        }
      },
      "MetaTxn": {
        "type": "object",
        "required": [
          "chainId",
          "walletAddress",
          "contract",
          "input"
        ],
        "properties": {
          "chainId": {
            "type": "number"
          },
          "walletAddress": {
            "type": "string"
          },
          "contract": {
            "type": "string"
          },
          "input": {
            "type": "string"
          }
        }
      },
      "MetaTxnLog": {
        "type": "object",
        "required": [
          "id",
          "chainId",
          "projectId",
          "txnHash",
          "txnNonce",
          "txnStatus",
          "txnRevertReason",
          "requeues",
          "queuedAt",
          "sentAt",
          "minedAt",
          "target",
          "input",
          "txnArgs",
          "walletAddress",
          "metaTxnNonce",
          "gasLimit",
          "gasPrice",
          "gasUsed",
          "gasEstimated",
          "usdRate",
          "creditsUsed",
          "isWhitelisted",
          "updatedAt",
          "createdAt"
        ],
        "properties": {
          "id": {
            "type": "number"
          },
          "chainId": {
            "type": "number"
          },
          "projectId": {
            "type": "number"
          },
          "txnHash": {
            "type": "string"
          },
          "txnNonce": {
            "type": "string"
          },
          "metaTxnID": {
            "type": "string"
          },
          "txnStatus": {
            "$ref": "#/components/schemas/ETHTxnStatus"
          },
          "txnRevertReason": {
            "type": "string"
          },
          "requeues": {
            "type": "number"
          },
          "queuedAt": {
            "type": "string"
          },
          "sentAt": {
            "type": "string"
          },
          "minedAt": {
            "type": "string"
          },
          "target": {
            "type": "string"
          },
          "input": {
            "type": "string"
          },
          "txnArgs": {
            "type": "object",
            "description": "map<string,any>",
            "additionalProperties": {
              "type": "object"
            }
          },
          "txnReceipt": {
            "type": "object",
            "description": "map<string,any>",
            "additionalProperties": {
              "type": "object"
            }
          },
          "walletAddress": {
            "type": "string"
          },
          "metaTxnNonce": {
            "type": "string"
          },
          "gasLimit": {
            "type": "number"
          },
          "gasPrice": {
            "type": "string"
          },
          "gasUsed": {
            "type": "number"
          },
          "gasEstimated": {
            "type": "number"
          },
          "gasFeeMarkup": {
            "type": "number"
          },
          "usdRate": {
            "type": "string"
          },
          "creditsUsed": {
            "type": "number"
          },
          "isWhitelisted": {
            "type": "boolean"
          },
          "gasSponsor": {
            "type": "number"
          },
          "gasTank": {
            "type": "number"
          },
          "updatedAt": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          }
        }
      },
      "MetaTxnReceipt": {
        "type": "object",
        "required": [
          "id",
          "status",
          "index",
          "logs",
          "receipts",
          "txnReceipt"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "revertReason": {
            "type": "string"
          },
          "index": {
            "type": "number"
          },
          "logs": {
            "type": "array",
            "description": "[]MetaTxnReceiptLog",
            "items": {
              "$ref": "#/components/schemas/MetaTxnReceiptLog"
            }
          },
          "receipts": {
            "type": "array",
            "description": "[]MetaTxnReceipt",
            "items": {
              "$ref": "#/components/schemas/MetaTxnReceipt"
            }
          },
          "txnReceipt": {
            "type": "string"
          }
        }
      },
      "MetaTxnReceiptLog": {
        "type": "object",
        "required": [
          "address",
          "topics",
          "data"
        ],
        "properties": {
          "address": {
            "type": "string"
          },
          "topics": {
            "type": "array",
            "description": "[]string",
            "items": {
              "type": "string"
            }
          },
          "data": {
            "type": "string"
          }
        }
      },
      "Transaction": {
        "type": "object",
        "required": [
          "blockNumber",
          "chainId",
          "timestamp"
        ],
        "properties": {
          "txnHash": {
            "type": "string"
          },
          "blockNumber": {
            "type": "number"
          },
          "chainId": {
            "type": "number"
          },
          "metaTxnID": {
            "type": "string"
          },
          "transfers": {
            "type": "array",
            "description": "[]TxnLogTransfer",
            "items": {
              "$ref": "#/components/schemas/TxnLogTransfer"
            }
          },
          "users": {
            "type": "object",
            "description": "map<string,TxnLogUser>",
            "additionalProperties": {
              "$ref": "#/components/schemas/TxnLogUser"
            }
          },
          "timestamp": {
            "type": "string"
          }
        }
      },
      "TxnLogUser": {
        "type": "object",
        "required": [
          "username"
        ],
        "properties": {
          "username": {
            "type": "string"
          }
        }
      },
      "TxnLogTransfer": {
        "type": "object",
        "required": [
          "transferType",
          "contractAddress",
          "from",
          "to",
          "ids",
          "amounts"
        ],
        "properties": {
          "transferType": {
            "$ref": "#/components/schemas/TransferType"
          },
          "contractAddress": {
            "type": "string"
          },
          "from": {
            "type": "string"
          },
          "to": {
            "type": "string"
          },
          "ids": {
            "type": "array",
            "description": "[]string",
            "items": {
              "type": "string"
            }
          },
          "amounts": {
            "type": "array",
            "description": "[]string",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SentTransactionsFilter": {
        "type": "object",
        "properties": {
          "pending": {
            "type": "boolean"
          },
          "failed": {
            "type": "boolean"
          }
        }
      },
      "SimulateResult": {
        "type": "object",
        "required": [
          "executed",
          "succeeded",
          "gasUsed",
          "gasLimit"
        ],
        "properties": {
          "executed": {
            "type": "boolean"
          },
          "succeeded": {
            "type": "boolean"
          },
          "result": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          },
          "gasUsed": {
            "type": "number"
          },
          "gasLimit": {
            "type": "number"
          }
        }
      },
      "FeeOption": {
        "type": "object",
        "required": [
          "token",
          "to",
          "value",
          "gasLimit"
        ],
        "properties": {
          "token": {
            "$ref": "#/components/schemas/FeeToken"
          },
          "to": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "gasLimit": {
            "type": "number"
          }
        }
      },
      "FeeToken": {
        "type": "object",
        "required": [
          "chainId",
          "name",
          "symbol",
          "type",
          "logoURL"
        ],
        "properties": {
          "chainId": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "symbol": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/FeeTokenType"
          },
          "decimals": {
            "type": "number"
          },
          "logoURL": {
            "type": "string"
          },
          "contractAddress": {
            "type": "string"
          },
          "tokenID": {
            "type": "string"
          }
        }
      },
      "Page": {
        "type": "object",
        "properties": {
          "pageSize": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "more": {
            "type": "boolean"
          },
          "totalRecords": {
            "type": "number"
          },
          "column": {
            "type": "string"
          },
          "before": {
            "type": "object"
          },
          "after": {
            "type": "object"
          },
          "sort": {
            "type": "array",
            "description": "[]SortBy",
            "items": {
              "$ref": "#/components/schemas/SortBy"
            }
          }
        }
      },
      "SortBy": {
        "type": "object",
        "required": [
          "column",
          "order"
        ],
        "properties": {
          "column": {
            "type": "string"
          },
          "order": {
            "$ref": "#/components/schemas/SortOrder"
          }
        }
      },
      "Relayer_GetChainID_Request": {
        "type": "object"
      },
      "Relayer_FeeTokens_Request": {
        "type": "object"
      },
      "Relayer_FeeOptions_Request": {
        "type": "object",
        "properties": {
          "wallet": {
            "type": "string"
          },
          "to": {
            "type": "string"
          },
          "data": {
            "type": "string"
          },
          "simulate": {
            "type": "boolean"
          }
        }
      },
      "Relayer_GetChainID_Response": {
        "type": "object",
        "properties": {
          "chainID": {
            "type": "number"
          }
        }
      },
      "Relayer_FeeTokens_Response": {
        "type": "object",
        "properties": {
          "isFeeRequired": {
            "type": "boolean"
          },
          "tokens": {
            "type": "array",
            "description": "[]FeeToken",
            "items": {
              "$ref": "#/components/schemas/FeeToken"
            }
          }
        }
      },
      "Relayer_FeeOptions_Response": {
        "type": "object",
        "properties": {
          "options": {
            "type": "array",
            "description": "[]FeeOption",
            "items": {
              "$ref": "#/components/schemas/FeeOption"
            }
          },
          "sponsored": {
            "type": "boolean"
          },
          "quote": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "description": "Public project access key for authenticating requests obtained on Sequence Builder. Example Test Key: AQAAAAAAAEGvyZiWA9FMslYeG_yayXaHnSI",
        "name": "X-Access-Key"
      },
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "Secret JWT token for authenticating requests obtained from Sequence Builder - should not be exposed publicly."
      }
    }
  },
  "info": {
    "title": "Relayer Api",
    "version": ""
  },
  "openapi": "3.0.0",
  "paths": {
    "/rpc/Relayer/GetChainID": {
      "post": {
        "summary": "GetChainID",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Relayer_GetChainID_Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Relayer_GetChainID_Response"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorAborted"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorGeoblocked"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorUnavailable"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorInsufficientFee"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorWebrpcInternalError"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [
              "AQAAAAAAAEGvyZiWA9FMslYeG_yayXaHnSI"
            ]
          }
        ]
      }
    },
    "/rpc/Relayer/FeeTokens": {
      "post": {
        "summary": "FeeTokens",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Relayer_FeeTokens_Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Relayer_FeeTokens_Response"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorAborted"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorGeoblocked"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorUnavailable"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorInsufficientFee"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorWebrpcInternalError"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [
              "AQAAAAAAAEGvyZiWA9FMslYeG_yayXaHnSI"
            ]
          }
        ]
      }
    },
    "/rpc/Relayer/FeeOptions": {
      "post": {
        "summary": "FeeOptions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Relayer_FeeOptions_Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Relayer_FeeOptions_Response"
                }
              }
            }
          },
          "4XX": {
            "description": "Client error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorWebrpcEndpoint"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorWebrpcRequestFailed"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorWebrpcBadRoute"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorWebrpcBadMethod"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorWebrpcBadRequest"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorWebrpcClientDisconnected"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorWebrpcStreamLost"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorUnauthorized"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorPermissionDenied"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorMethodNotFound"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorRequestConflict"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorAborted"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorGeoblocked"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorInvalidArgument"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorUnavailable"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorQueryFailed"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorNotFound"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorInsufficientFee"
                    }
                  ]
                }
              }
            }
          },
          "5XX": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorWebrpcBadResponse"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorWebrpcServerPanic"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorWebrpcInternalError"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": [
              "AQAAAAAAAEGvyZiWA9FMslYeG_yayXaHnSI"
            ]
          }
        ]
      }
    }
  },
  "servers": [
    {
      "url": "https://amoy-relayer.sequence.app",
      "description": "Amoy Relayer"
    },
    {
      "url": "https://apechain-relayer.sequence.app",
      "description": "Apechain Relayer"
    },
    {
      "url": "https://apechain-testnet-relayer.sequence.app",
      "description": "Apechain-Testnet Relayer"
    },
    {
      "url": "https://arbitrum-relayer.sequence.app",
      "description": "Arbitrum Relayer"
    },
    {
      "url": "https://arbitrum-nova-relayer.sequence.app",
      "description": "Arbitrum-Nova Relayer"
    },
    {
      "url": "https://arbitrum-sepolia-relayer.sequence.app",
      "description": "Arbitrum-Sepolia Relayer"
    },
    {
      "url": "https://avalanche-relayer.sequence.app",
      "description": "Avalanche Relayer"
    },
    {
      "url": "https://avalanche-testnet-relayer.sequence.app",
      "description": "Avalanche-Testnet Relayer"
    },
    {
      "url": "https://b3-relayer.sequence.app",
      "description": "B3 Relayer"
    },
    {
      "url": "https://b3-sepolia-relayer.sequence.app",
      "description": "B3-Sepolia Relayer"
    },
    {
      "url": "https://base-relayer.sequence.app",
      "description": "Base Relayer"
    },
    {
      "url": "https://base-sepolia-relayer.sequence.app",
      "description": "Base-Sepolia Relayer"
    },
    {
      "url": "https://blast-relayer.sequence.app",
      "description": "Blast Relayer"
    },
    {
      "url": "https://blast-sepolia-relayer.sequence.app",
      "description": "Blast-Sepolia Relayer"
    },
    {
      "url": "https://bsc-relayer.sequence.app",
      "description": "Bsc Relayer"
    },
    {
      "url": "https://bsc-testnet-relayer.sequence.app",
      "description": "Bsc-Testnet Relayer"
    },
    {
      "url": "https://gnosis-relayer.sequence.app",
      "description": "Gnosis Relayer"
    },
    {
      "url": "https://homeverse-relayer.sequence.app",
      "description": "Homeverse Relayer"
    },
    {
      "url": "https://homeverse-testnet-relayer.sequence.app",
      "description": "Homeverse-Testnet Relayer"
    },
    {
      "url": "https://immutable-zkevm-relayer.sequence.app",
      "description": "Immutable-Zkevm Relayer"
    },
    {
      "url": "https://immutable-zkevm-testnet-relayer.sequence.app",
      "description": "Immutable-Zkevm-Testnet Relayer"
    },
    {
      "url": "https://laos-relayer.sequence.app",
      "description": "Laos Relayer"
    },
    {
      "url": "https://laos-sigma-testnet-relayer.sequence.app",
      "description": "Laos-Sigma-Testnet Relayer"
    },
    {
      "url": "https://mainnet-relayer.sequence.app",
      "description": "Mainnet Relayer"
    },
    {
      "url": "https://optimism-relayer.sequence.app",
      "description": "Optimism Relayer"
    },
    {
      "url": "https://optimism-sepolia-relayer.sequence.app",
      "description": "Optimism-Sepolia Relayer"
    },
    {
      "url": "https://polygon-relayer.sequence.app",
      "description": "Polygon Relayer"
    },
    {
      "url": "https://polygon-zkevm-relayer.sequence.app",
      "description": "Polygon-Zkevm Relayer"
    },
    {
      "url": "https://rootnet-relayer.sequence.app",
      "description": "Rootnet Relayer"
    },
    {
      "url": "https://rootnet-porcini-relayer.sequence.app",
      "description": "Rootnet-Porcini Relayer"
    },
    {
      "url": "https://sepolia-relayer.sequence.app",
      "description": "Sepolia Relayer"
    },
    {
      "url": "https://skale-nebula-relayer.sequence.app",
      "description": "Skale-Nebula Relayer"
    },
    {
      "url": "https://skale-nebula-testnet-relayer.sequence.app",
      "description": "Skale-Nebula-Testnet Relayer"
    },
    {
      "url": "https://soneium-minato-relayer.sequence.app",
      "description": "Soneium-Minato Relayer"
    },
    {
      "url": "https://toy-testnet-relayer.sequence.app",
      "description": "Toy-Testnet Relayer"
    },
    {
      "url": "https://xai-relayer.sequence.app",
      "description": "Xai Relayer"
    },
    {
      "url": "https://xai-sepolia-relayer.sequence.app",
      "description": "Xai-Sepolia Relayer"
    },
    {
      "url": "https://xr-sepolia-relayer.sequence.app",
      "description": "Xr-Sepolia Relayer"
    }
  ]
}
